:LATEX_PROPERTIES:
#+LATEX_COMPILER: lualatex
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [9pt, a4paper, notitlepage]

#+LATEX_HEADER: \usepackage{polyglossia}
#+LATEX_HEADER: \setmainlanguage{greek}
#+LATEX_HEADER: \setotherlanguage{english}

#+LATEX_HEADER: \setmainfont[BoldFont = {Iosevka Aile Light}, ItalicFont = {Iosevka Aile Extralight Italic}]{Iosevka Aile Extralight}
#+LATEX_HEADER: \setmonofont{Iosevka}

#+LATEX_HEADER: \usepackage{microtype}
#+LATEX_HEADER: \usepackage{extsizes}

# #+LATEX_HEADER: \usepackage{unicode-math}
# #+LATEX_HEADER: \setmathfont{Fira Math}

#+LATEX_HEADER: \usepackage{biblatex}
# #+LATEX_HEADER: \DefineBibliographyStrings{greek}{pagetotals = {σελίδες}}
#+LATEX_HEADER: \AtEveryBibitem{\clearfield{pagetotal}}

#+LATEX_HEADER: \usepackage{svg}

#+LATEX_HEADER: \usepackage[margin=1.3in]{geometry}

#+LATEX_HEADER: \renewcommand{\baselinestretch}{1.2}

#+LATEX_HEADER: \usepackage[font={small}, labelfont={bf}]{caption}

#+LATEX_HEADER: \usemintedstyle{vs}
#+LATEX_HEADER: \setminted{frame=single, framesep=2mm}

#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \rhead{Κωνσταντίνος Χούσος}
#+LATEX_HEADER: \lhead{\textit{Pacman: Project 2}}
#+LATEX_HEADER: \chead{}

#+LATEX_HEADER: \usepackage{titlesec}
#+LATEX_HEADER: \titleformat{\section}{\large \center \bf \uppercase}{\thesection}{0.5em}{}{}

#+LATEX_HEADER: \usepackage{multicol}
:END:
#+TITLE: *Pacman: Project 2*
#+SUBTITLE: Multi-Agent Search
#+AUTHOR: Κωνσταντίνος Χούσος
#+OPTIONS: num:nil toc:nil date:nil timestamp:nil \n:t
#+STARTUP: overview

#+begin_abstract
Το συγκεκριμένο report αναλύει τις λύσεις μου στο project 2 των Pac-Man Projects του Berkeley [cite:@deneroProjectsCS1882022], στα πλαίσια του προπτυχιακού μαθήματος "Τεχνητή Νοημοσύνη". Στο πρώτο ερώτημα προτιμούμε τις καταστάσεις που μας φέρνουν πιο κοντά σε τελείες και πιο μακριά από φαντάσματα, αποφεύγοντας πάντα την ήττα. Τα ερωτήματα 2, 3 και 4 υλοποιούν τους αντίστοιχους αλγορίθμους με βάση την θεωρία, ελέγχοντας κάθε φορά ποιον agent αφορά. Το ερώτημα 5 αποτελεί μια βελτίωση του κώδικα του ερωτήματος 1, με κύρια διαφορά τον καινούργιο έλεγχο για capsules.
#+end_abstract

#+LATEX: \begin{multicols}{2}

* 1: Reflex Agent

Το συγκεκριμένο evaluation function ακολουθεί την εξής λογική:
1. Πρώτον, αν το successorGameState επιφέρει ήττα, επιστρέφουμε μια minimum τιμή (-99) κάνοντάς την χείριστη. Αλλιώς, αν επιφέρει νίκη, επιστρέφουμε μια maximum τιμή (99) κάνοντάς την βέλτιστη.
2. Αν τίποτα από τα παραπάνω δεν ισχύει, πρώτα ασχολούμαστε με τα φαντάσματα. Βρίσκουμε τις αποστάσεις για κάθε φάντασμα που δεν είναι σε κατάσταση scared, λαμβάνουμε υπόψιν το κοντινότερο κι άρα πιο απειλητικό και αφαιρούμε από το score το "βάρος" του---όπου το "βάρος" υπολογίζεται ως ο αντίστροφος της απόστασής του. Το συγκεκριμένο βήμα δεν είναι απαραίτητο, αλλά με αυτό η υλοποίηση είναι ικανή να νικάει και directional ghosts.
3. Ακολουθείται μια αντίστοιχη διαδικασία με αυτήν του βήματος 2, αλλά αυτήν τη φορά για τις τελείες. Η μόνη διαφορά είναι ότι σε αυτήν την περίπτωση το βάρος προστίθεται στο score, καθώς θέλουμε να έρθουμε κοντά σε όλες τις τελείες.

* 2: Minimax

#+HTML: <div align="center">
#+ATTR_LATEX: :placement [H]
#+LABEL: img:minimax_pseudocode
#+CAPTION: Ψευδοκώδικας =minimax=
[[file:img/2022-12-05_16-45-37_screenshot.png]]
#+HTML: </div>

Η υλοποίηση στο συγκεκριμένο ερώτημα ακολουθεί την λογική του ψευδοκώδικα του βιβλίου [cite:@russellArtificialIntelligenceModern2022] που υπάρχει στο σχήμα [[img:minimax_pseudocode]].

Πρώτον, υπάρχει μια βοηθητική συνάρτηση =terminal=, η οποία επιστρέφει =True= αν έχουμε φτάσει σε κατάσταση νίκης, ήττας ή είμαστε στο μέγιστο βάθος, αλλιώς επιστρέφει =False=.

Η =maxValue=---η οποία αφορά τον pacman---ελέγχει πρώτα αν είμαστε σε terminal state, δηλαδή αν είμαστε σε φύλλο του δένδρου παιχνιδιού, όπου τότε επιστρέφει το utility του κόμβου. Αν δεν είμαστε σε φύλλο, επιστρέφει την μέγιστη τιμή από τις πιθανές τιμές της =minValue= για κάθε δυνατή κίνηση.

Η =minValue=---η οποία αφορά όλα τα φαντάσματα---ακολουθεί μια παρόμοια σκέψη. Η διαφορά βρίσκεται στο ότι κάθε φορά ελέγχεται αν ο επόμενος agent είναι άλλο φάντασμα ή ο pacman. Στην πρώτη περίπτωση, επιστρέφει την ελάχιστη τιμή από τις πιθανές τιμές της =minValue= για κάθε δυνατή κίνηση του επόμενου φαντάσματος. Στην δεύτερη, επιστρέφει την ελάχιστη τιμή από τις πιθανές τιμές της =maxValue= για κάθε δυνατή κίνηση του pacman, αυξάνοντας παράλληλα το βάθος κατά 1.

Η συνάρτηση =getAction= επιστρέφει την κίνηση με τη μέγιστη minimax τιμή.

* 3: Alpha-Beta Pruning

Ο κώδικας του συγκεκριμένου ερωτήματος είναι σχεδόν ίδιος με εκείνον του ερωτήματος 2, προσαρμοσμένος πλέον να λαμβάνει υπόψιν τις $\alpha, \beta$ τιμές. Η μόνη διαφορά με τον ψευδοκώδικα του βιβλίου [cite:@russellArtificialIntelligenceModern2022] βρίσκεται στα σημεία σύγκρισης του $v$ με τα $\alpha, \beta$. Σε αντίθεση με αυτόν, ο ψευδοκώδικας που δίνεται ως παράδειγμα από την εκφώνηση του project [cite:@deneroProjectsCS1882022] ορίζει σε εκείνα τα σημεία *αυστηρή* ανισότητα. Λόγω αυτού και καθώς η υλοποίηση με μη αυστηρή ανισότητα δεν περνάει τα tests, χρησιμοποιήθηκε αυστηρή ανισότητα.

* 4: Expectimax

Ομοίως με το ερώτημα 3, ο κώδικας αποτελεί μια παραλλαγή του ψευδοκώδικα του =minimax= (σχήμα [[img:minimax_pseudocode]]). Η διαφορά έγκειται στο ότι αντί για την =minValue= έχουμε πλέον μια παραλλαγή της: την =expValue=. Στην δεύτερη, αντί να βρίσκουμε κάποια ελάχιστη τιμή βρίσκουμε το άθροισμα των πιθανοτήτων κάθε δυνατής κίνησης των φαντασμάτων και του pacman.

* 5: Evaluation Function

Ο κώδικας είναι εμπνευσμένος από αυτόν του ερωτήματος 1. Εν συντομία, αποφεύγουμε τα φαντάσματα που δεν είναι φοβισμένα και πηγαίνουμε προς το κοντινότερο φαγητό. Το καινούργιο στοιχείο της συγκεκριμένης συνάρτησης είναι ότι πέρα από τα προηγούμενα ελέγχουμε και κατά πόσο υπάρχει κοντά κάποια /κάψουλα/. Με τον ίδιο τρόπο που ελέγχουμε το φαγητό ελέγχουμε κι αυτό, δηλαδή προσθέτοντας τον αντίστροφο της απόστασης της κοντινότερης κάψουλας.

#+LATEX: \end{multicols}

#+HTML: <h2>Αναφορές</h2>   
#+print_bibliography:
